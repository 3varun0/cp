/** 
FOLLOW UP on same problem of bfs, which can be asked in interviews
=> print the path of the SSSP 
#MEDIUM 

*/

/*

S . # . . .
. . # . . .
# . # . # .
. . . . # .
# # # # . .
F . . . . .
*/

#include<bits/stdc++.h>
using namespace std;
using state = pair<int, int>;
#define F first
#define S second
const int INF = 100;


int n, m;
vector<vector<char>> arr;

//vector<vector<int>> vis;
vector<vector<int>> dis;
vector<vector<state>> parents;

bool is_valid(int x, int y) {
    if (x>=0&&x<n && y>=0&&y<m && arr[x][y] != '#') return 1;
    return 0;
}
int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};
vector<state> neighbours(state node) {
    vector<state> neights;
    for (int i=0; i<4; i++) {
        int x = node.F + dx[i];
        int y = node.S + dy[i];
        if (is_valid(x, y)) {
            neights.push_back( {x,y} );
        }
    }
    return neights;
}

void bfs(state st_node) {
    //vis.assign(n, vector<int>(m,0));
    dis.assign(n, vector<int>(m, INF));
    parents.assign(n, vector<state> (m, {-1, -1}));
    
    queue<state> q;
    //vis[st_node.F][st_node.S] = 1;
    dis[st_node.F][st_node.S] = 0;
    parents[st_node.F][st_node.S] = {-1, -1};//path of first node
    q.push(st_node);
    while (!q.empty()) {
        state node = q.front();
        q.pop();
        for (state v:neighbours(node)) {
            if (dis[v.F][v.S]==INF) { //if (!vis[v.F][v.S]) {
                //vis[v.F][v.S] = 1;
                dis[v.F][v.S] = dis[node.F][node.S] + 1;
                parents[v.F][v.S] = node;
                q.push(v);
            }
        }
    }
}

void print_path(state en) {
    vector<state> path;
        
        state cur = en;
        while (cur != make_pair(-1,-1)) {
            path.push_back(cur);
            cur = parents[cur.F][cur.S];
        }
        
        reverse(path.begin(), path.end());
        
        for (auto v:path) {
            cout<<v.F<<", "<<v.S<<endl;
        }
}

int main () {
    cin>>n>>m;
    arr.resize(n);
    state st, en;
    
    for (int i=0; i<n; i++) {
        arr[i].resize(m);
        for (int j=0; j<m; j++) {
            cin>>arr[i][j];
            
            if (arr[i][j] == 'S') {
                st = {i, j};
            } else if (arr[i][j] == 'F') {
                en = {i, j};
            }
        }
    }
    
    bfs(st);
    for (int i=0; i<n; i++) {
        for (int j=0; j<m; j++) {
            cout<<dis[i][j]<<"\t";
        }
        cout<<endl;
    }
    
    if (dis[en.F][en.S] == INF){//if (!vis[en.F][en.S]){
        cout<<"Finish is not reachable !"<<endl;
    } else {
        cout<<dis[en.F][en.S]<<endl;
        
        print_path(en);
    }
    return 0;
}

/*
---INPUT
6 6
S . # . . .
. . # . . .
# . # . # .
. . . . # .
# # # # . .
F . . . . .
---OUTPUT
0	1	100	9	10	11	
1	2	100	8	9	10	
100	3	100	7	100	11	
5	4	5	6	100	12	
100	100	100	100	14	13	
19	18	17	16	15	14	
19
0, 0
0, 1
1, 1
2, 1
3, 1
3, 2
3, 3
2, 3
1, 3
1, 4
1, 5
2, 5
3, 5
4, 5
5, 5
5, 4
5, 3
5, 2
5, 1
5, 0
*/