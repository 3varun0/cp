//basic graph dfs implementation

#include <bits/stdc++.h>
using namespace std;

int n, m;
vector<vector<int>> g;
vector<int> vis;
vector<int> temp;//pushing only visited nodes, just to double check if by mistake any node is visited twice or not !
void dfs (int node) {
    temp.push_back(node);
    vis[node] = 1;
    for(auto v : g[node]) {
        if (!vis[v]) {
            dfs(v);
        }
    }
}

int main()
{
    cin>>n>>m;
    g.resize(n+1);//graph resized to n nodes
    
    for (int i=0; i<m; i++) {//creating and establishing m edges
        int a,b;
        cin>>a>>b;
        g[a].push_back(b);
        
        //if undirected graph
        //g[b].push_back(a);
    }
    
    vis.assign(n+1, 0);//resizing vis (array) & initializing all elements with 0
    
    dfs(1);//taking 1 as starting node in the graph, starting dfs also to visit all connected nodes.
    
    //once dfs is executed, now creating an output
    cout<<"Visited: "<<endl;
    for (int i=1; i<=n; i++) {
        cout<<i<<" "<<vis[i]<<endl;
    }
    cout<<"temp: "<<endl;
    for (auto v: temp) {
        cout<<v<<" ";
    }
    return 0;
}
